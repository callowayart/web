#!/usr/bin/env ruby
# Description: Migrates data from defunt callowayart database


# REQUIRE
require 'mysql2'
require 'faraday'
require 'open-uri'
require 'json'

# CONST
ROOT       = '/app/callowayart/'
ROOT_IMAGE = 'http://www.callowayart.com/ART' 

# FUNCTIONS / PATCHES

class String
  def slugify
    self.downcase.strip.gsub(' ', '-').gsub(/[^\w-]/, '')
  end

  def prettify
    self.gsub(/::/, '/').
    gsub(/([A-Z]+)([A-Z][a-z])/,'\1 \2').
    gsub(/([a-z\d])([A-Z])/,'\1 \2').
    tr("-_", " ").
    downcase
  end
  
end

def dump_database
end

def save_image id
  open(file = "/tmp/#{id}.jpg", 'wb') do |file|
    file << open("#{ROOT_IMAGE}/#{id}_full.jpg").read
  end

  file
end

# returns formatted description of post
# using available data
def description_for_art post
  @fields ||= begin
    response = @client.query %{
      SELECT `COLUMN_NAME` 
      FROM   `INFORMATION_SCHEMA`.`COLUMNS` 
      WHERE 
        `TABLE_SCHEMA`='callow5_gallery' 
        AND `TABLE_NAME`='art'
        AND `COLUMN_NAME` not like 'ID_%'      
    }

    response.map do | record |
      record['COLUMN_NAME'].prettify
    end
  end

  # iterate through fields against post
  # and check to see which are available
  description = [ ]

  @fields.each do | field |
    unless post[field].nil? || (
           post[field].is_a?(String) && post[field].strip.empty?  
    )
      description << "#{field}: #{post[field]}"
    end
  end

  description.join "\n"  
end


def description_for_artist artist
  description = artist['artist_bio']
  description += "\n\n#{artist['artist_url']}" unless artist['artist_url'].empty?

  description
end


# MAIN

# perform dump of current database
dump_database 

# create database client
@client = Mysql2::Client.new(
	host:     'database.defunct', 
  username: 'callow5',
  password: 'fe5180zz',
  database: 'callow5_gallery'
)


# query old records
result = @client.query %{
  SELECT
    a.*,
    a.ID_art    as art_id,
    ab.name     as artist,
    ab.URL      as artist_url,
    ab.bio      as artist_bio,
    e.title     as exhibit_title,
    e.endDate   as exhibit_end_date,
    e.startDate as exhibit_start_date,
    c.category  as category

  FROM art a
    LEFT JOIN artistBio ab
      ON ab.name = a.artist

    LEFT JOIN exhibit e
      USING (ID_exhibit)

    LEFT JOIN collection c
      USING (ID_collection)

}

# iterate through results and perform updates using
# a combination of api and database
rest = Faraday.new 'http://cms.callowayart.com'

# define additions for categories
additions = [ 
  { for: [ 
      'contemporary-art',
      'antique-prints-and-drawings',
      'antique-paintings',
      'sculpture'
    ],

    includes: [ 'fine art' ] 
  },

  { for: [ 
      'custom-framing-and-mirror-design'
    ],

    includes: [ 'design' ]
  }  
]

result.each do | record |
  
  # pull image down and save to local
  begin
    filename = save_image record['art_id']

  rescue
    next
  end

  # before we create post record, we need to determine
  # media tags and categories, if they exist
  tags = [ ]
  unless record['category'].nil?
    tags << { 
      name: record['category'].downcase.tr(',', ' '),
      slug: record['category'].slugify,
      type: 'media_tag',
      parent: 0 
    }

    additions.each do | addition |
      if addition[:for].include?(record['category'].slugify)
        addition[:includes].each do | inc |
          tags << { 
            name: inc.downcase,
            slug: inc.slugify,
            type: 'media_tag',
            parent: 0 
          }
        end
      end
    end    
  end

  unless record['artist'].nil?
    tags << { 
      name: record['artist'].downcase,
      slug: record['artist'].slugify,
      type: 'media_tag',
      parent: 0 
    }    
    tags << { 
      name:         record['artist'].downcase,
      slug:         record['artist'].slugify,
      description:  description_for_artist(record),
      type:         'category',
      parent:       10       
    }
  end

  unless record['exhibit_id'].nil? && record['exhibit_title'].nil?
    tags << { 
      name: 'exhibit',
      slug: 'exhibit',
      type: 'media_tag',
      parent: 0 
    }      
    tags << { 
      name: record['exhibit_title'].downcase.tr(',', ' '),
      slug: record['exhibit_title'].slugify,
      type: 'media_tag',
      parent: 0 
    }     
    tags << { 
      name:   record['exhibit_title'].downcase.tr(',', ' '),
      slug:   record['exhibit_title'].slugify,
      type:   'category',
      parent: 5 
    }  
  end
  
  response = rest.post '/api/term', {
    payload: tags.to_json
  }
  terms = JSON.parse(response.body)


  # add post and retrieve id
  response = rest.post '/api/media', { 
    payload: {
        filename:    filename,
        title:       record['title'],
        description: description_for_art(record),
        terms:       terms

      }.to_json
  }
  puts JSON.parse(response.body)[0]
  
end