#!/usr/bin/env ruby
# Description: Migrates data from defunt callowayart database

# REQUIRE
$LOAD_PATH.unshift(ENV['RAILS_ROOT'] + '/lib')

require 'faraday'
require 'tire'
require 'json'
require 'RMagick'
require 'pp'
require 'aws/s3'
require 'uri'
require 'pathname'
require 'elasticsearch'
require 'statement'
require 'rest-client'
require 'addressable/uri'

# CONSTANTS


# FUNCTION / PATCHES

include Magick
include AWS::S3

$VERBOSE = nil


Base.establish_connection!(
	access_key_id:     ENV['AMAZON_ACCESS_KEY_ID'],	
	secret_access_key: ENV['AMAZON_SECRET_ACCESS_KEY']
)
@bucket = Bucket.find('callowayart.com') or raise "failed to find bucket callowayart.com"


class String
  def slugify
    self.downcase.strip.gsub(' ', '-').gsub(/[^\w-]/, '')
  end
end

module Kernel
  def with_cached_print
    save_so, $stdout = $stdout, StringIO.new(' ', 'w')
   
    yield if block_given?
   
    my_so, $stdout = $stdout, save_so
    my_so.string
  end
end

# save image to /tmp
def resize_image uri, options = { }

	# parse id, mime type from image uri
	format = uri.split('/').last.match(/\.(.+)$/)[1]
	id     = uri.split('/').last.sub(/\..+$/, '').slugify

	# resize image and save to /tmp
	image = Image.read(uri)[0]
	
	# calculate width/height based on percentage of 
	# difference of width from absolute value of 150
	if options[:width]
		width  = options[:width]
		scale  = (image.page.width - width) / image.page.width.to_f
		height = image.page.height - (image.page.height * scale)

		image = image.thumbnail(width, height)
		image.write(
			path = "/tmp/#{id}-constrainedw.#{format}"
		)		

	elsif options[:height]
		height = options[:height]
		scale  = (image.page.height - height) / image.page.height.to_f
		width  = image.page.width - (image.page.width * scale)

		image = image.thumbnail(width, height)
		image.write(
			path = "/tmp/#{id}-thumbh.#{format}"
		)

	else
		width  = 150
		scale  = (image.page.width - width) / image.page.width.to_f
		height = image.page.height - (image.page.height * scale)

		image = image.thumbnail(width, height)
		image.write(
			path = "/tmp/#{id}-thumb.#{format}"
		)

	end

  path
end

def save_to_s3 uri, path
	uri = URI(uri)

	# get domain and save path
	domain    = uri.scheme + '://callowayart.com.s3.amazonaws.com'
	save_path = File.dirname(uri.path) + '/' +
	            Pathname.new(path).basename.to_s
	
	# store s3
	S3Object.store( 
		save_path, open(path), 'callowayart.com', access: :public_read
	)

	# return reference 
	domain + save_path
end


def get(resource, params = { })

  # convert params to get query string
  uri = Addressable::URI.new
  uri.query_values = params

  # fire get request, parse json response and return
  JSON.parse(RestClient.get(
    "http://cms.callowayart.com/api#{resource}?#{uri.query}",
    
    #headers
    {  }
  ))

end

def elasticsearch
	@elasticsearch ||= begin
		Elasticsearch::Client.new
	end
end

# MAIN



# create rest client

# call callowayart cms for tags and index against es
get( '/tag' ).each do | record |
	puts rec
end


# iterate through records
count = 0
limit = 100

loop do
	puts "processing images #{count * limit} through #{(count * limit) + limit}"

	index  = [ ] 
	images = JSON.parse(rest.get('/api/image', {
		offset: ((count += 1) - 1) * limit,
		limit:  limit,
		recent: ARGV[0] == 'recent' && 1 || 0
	}).body)

	# iterate through images, transform and import into 
	# elastic search
	images.each do | image |
		# in the event of images not being defined on amazon
		# we need to upload to s3 and reset 'full' uri
		unless image['full'] =~ /s3\.amazonaws/
			image['full'] = save_to_s3 image['full'], image['full']
		end

		# save the image file, resize and push to s3
		begin
			path  = resize_image image['full']
			thumb = save_to_s3   image['full'], path

			path   = resize_image image['full'],  height: 120
			thumbh = save_to_s3  image['full'], path

			path         = resize_image image['full'],  width: 600
			constrainedw = save_to_s3   image['full'], path		

		rescue Exception => ignore
			next
		end

		index << hash = {
			id:           image['id'],
			title:        image['title'],
			title_slug:   image['title'].slugify,
			description:  image['description'] || "description",
			artist:       image['artist'],
			uri:          image['full'],
			thumb:        thumb,
			thumbh:       thumbh,
			constrainedw: constrainedw, 
			tags:         image['tags'] || [ ],
			type:         'art',
			artist_description: image['artist_description']
		}


		%w{ 
			artist_slug 
			title_slug 
			exhibit 
			exhibit_slug 
			exhibit_description
			artist
			artist_description

		}.each do | field |
			hash[field.to_sym] = image[field] if image[field]
		end

		# add last name if available
		*ignore, hash[:artist_last_name] = hash[:artist].split( ' ' ) if hash[:artist]		

		# if exhibit description exists, check for meta tags and
		# remove and store if the case
		unless hash[:exhibit_description].nil?

			hash[:exhibit_description].gsub!( /^@.+?$/ ) do | match |

				# get name and value from meta tag
				name, value = match[1..-1].split( '=' )

				# make sure values are properly stripped
				hash[name.strip.to_sym] = value.strip

				# ultimately we are replacing the line, so we return an 
				# empty string
				# TODO: this may cause additional line breaks, so may need
				# to remove as well
				''
			end

		end

	end

	Tire.index 'callowayart' do
		import index
	end

	break if images.count == 0
end

Dir.glob('/tmp/*.jpg').each { |f| File.delete(f) }

puts "done"
